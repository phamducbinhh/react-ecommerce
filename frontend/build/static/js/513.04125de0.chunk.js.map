{"version":3,"file":"static/js/513.04125de0.chunk.js","mappings":"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","sources":["Components/Loading/Loading.js","Components/MessageBox.js","Components/field/Field.js","Components/input/Input.js","Components/label/Label.js","Layout/Heading.js","Components/checkbox/CheckboxHook.js","Reducer/reducerUserUpdate.js","modules/UserListUpdate.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className='section secton-center'>\r\n      <div className='loading'></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading","import Alert from \"react-bootstrap/Alert\";\r\n\r\nexport default function MessageBox(props) {\r\n  return <Alert variant={props.variant || \"info\"}>{props.children}</Alert>;\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst FieldStyles = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  row-gap: 20px;\r\n  margin-bottom: 40px;\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\nconst Field = ({ children }) => {\r\n  return <FieldStyles>{children}</FieldStyles>;\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useController } from \"react-hook-form\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst InputStyles = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  input {\r\n    width: 100%;\r\n    padding: ${(props) => (props.hasIcon ? \"10px 60px 10px 20px\" : \"10px\")};\r\n    background-color: ${(props) => props.theme.grayLight};\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    transition: all 0.2s linear;\r\n    border: 1px solid transparent;\r\n    outline: none;\r\n  }\r\n  input:focus {\r\n    background-color: white;\r\n    border-color: var(--clr-primary-1);\r\n  }\r\n  input::-webkit-input-placeholder {\r\n    color: #84878b;\r\n  }\r\n  input::-moz-input-placeholder {\r\n    color: #84878b;\r\n  }\r\n  .input-icon {\r\n    position: absolute;\r\n    right: 20px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    cursor: pointer;\r\n  }\r\n  @media only screen and (max-width: 740px) {\r\n    input {\r\n      padding: 12px;\r\n    }\r\n    input::-webkit-input-placeholder {\r\n      font-size: 12px;\r\n    }\r\n    input::-moz-input-placeholder {\r\n      color: #84878b;\r\n    }\r\n  }\r\n`;\r\nconst Input = ({\r\n  name = \"\",\r\n  type = \"text\",\r\n  children,\r\n  value,\r\n  control,\r\n  ...props\r\n}) => {\r\n  const { field } = useController({\r\n    control,\r\n    name,\r\n    defaultValue: \"\",\r\n  });\r\n  return (\r\n    <InputStyles hasIcon={children ? true : false}>\r\n      <input id={name} type={type} {...field} {...props} />\r\n      {children ? <div className=\"input-icon\">{children}</div> : null}\r\n    </InputStyles>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  children: PropTypes.any,\r\n  control: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LabelStyles = styled.label`\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Label = ({ htmlFor = \"\", children, ...props }) => {\r\n  return (\r\n    <LabelStyles htmlFor={htmlFor} {...props}>\r\n      {children}\r\n    </LabelStyles>\r\n  );\r\n};\r\n\r\nLabel.propTypes = {\r\n  htmlFor: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Label;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst HeadingStyles = styled.h2`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 28px;\r\n  margin-bottom: 55px;\r\n  color: var(--clr-primary-5);\r\n  @media only screen and (max-width: 740px) {\r\n    font-size: 20px;\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\nconst Heading = ({ className = \"\", children }) => {\r\n  return <HeadingStyles className={className}>{children}</HeadingStyles>;\r\n};\r\n\r\nexport default Heading;\r\n","import React from \"react\";\r\nimport { useController } from \"react-hook-form\";\r\n\r\nconst CheckboxHook = ({ control, text, ...props }) => {\r\n  const { field } = useController({\r\n    control,\r\n    name: props.name,\r\n    defaultValue: false,\r\n  });\r\n  return (\r\n    <div className=\"styled-input-single\">\r\n      <input\r\n        type=\"checkbox\"\r\n        value={props.value}\r\n        id={props.name}\r\n        checked={field.value}\r\n        {...field}\r\n      />\r\n      <label htmlFor={props.name} className=\"text-sm cursor-pointer\">\r\n        {text}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckboxHook;\r\n","const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_REQUEST\":\r\n      return { ...state, loading: true };\r\n    case \"FETCH_SUCCESS\":\r\n      return { ...state, loading: false };\r\n    case \"FETCH_FAIL\":\r\n      return { ...state, loading: false, error: action.payload };\r\n    case \"UPDATE_REQUEST\":\r\n      return { ...state, loadingUpdate: true };\r\n    case \"UPDATE_SUCCESS\":\r\n      return { ...state, loadingUpdate: false };\r\n    case \"UPDATE_FAIL\":\r\n      return { ...state, loadingUpdate: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  error: \"\",\r\n};\r\n\r\nexport { reducer, initialState };\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useReducer } from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport styled from \"styled-components\";\r\nimport Swal from \"sweetalert2\";\r\nimport CheckboxHook from \"../Components/checkbox/CheckboxHook\";\r\nimport Field from \"../Components/field/Field\";\r\nimport Input from \"../Components/input/Input\";\r\nimport Label from \"../Components/label/Label\";\r\nimport Loading from \"../Components/Loading/Loading\";\r\nimport MessageBox from \"../Components/MessageBox\";\r\nimport { useStore } from \"../Context/Store-Context\";\r\nimport Heading from \"../Layout/Heading\";\r\nimport { initialState, reducer } from \"../Reducer/reducerUserUpdate\";\r\nimport { getError } from \"../Util/constanst\";\r\n\r\nconst Wrapper = styled.div`\r\n  min-height: 100vh;\r\n  padding: 40px;\r\n  .form {\r\n    max-width: 600px;\r\n    margin: 50px auto;\r\n  }\r\n  .styled-input-single {\r\n    position: relative;\r\n    padding: 20px 0 20px 40px;\r\n    text-align: left;\r\n\r\n    label {\r\n      cursor: pointer;\r\n      &:before,\r\n      &:after {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: 50%;\r\n        border-radius: 50%;\r\n      }\r\n      &:before {\r\n        left: 0;\r\n        width: 30px;\r\n        height: 30px;\r\n        margin: -15px 0 0;\r\n        background: #e7ecf3;\r\n        box-shadow: 0 0 1px grey;\r\n      }\r\n      &:after {\r\n        left: 5px;\r\n        width: 20px;\r\n        height: 20px;\r\n        margin: -10px 0 0;\r\n        opacity: 0;\r\n        background: #37b2b2;\r\n        transform: translate3d(-40px, 0, 0) scale(0.5);\r\n        transition: opacity 0.25s ease-in-out, transform 0.25s ease-in-out;\r\n      }\r\n    }\r\n\r\n    input[type=\"radio\"],\r\n    input[type=\"checkbox\"] {\r\n      position: absolute;\r\n      top: 0;\r\n      left: -9999px;\r\n      visibility: hidden;\r\n\r\n      &:checked + label {\r\n        &:before {\r\n        }\r\n        &:after {\r\n          transform: translate3d(0, 0, 0);\r\n          opacity: 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UserListUpdate = () => {\r\n  const navigate = useNavigate();\r\n  //dùng react-hook-form\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { isSubmitting },\r\n  } = useForm();\r\n\r\n  //context-api\r\n  const { state } = useStore();\r\n  const { userInfo } = state;\r\n  //get id = react-router-dom\r\n  const params = useParams(); //admin/user/id\r\n  const { id: userId } = params;\r\n\r\n  //reducerUserUpdate\r\n  const [{ loading, error }, dispatch] = useReducer(reducer, initialState);\r\n\r\n  //dùng state lấy giá trị checked\r\n  //get api hiển thị thông tin user\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        dispatch({ type: \"FETCH_REQUEST\" });\r\n        // để lấy ra dữ liệu của userId, bạn cần gửi request lên server với method GET\r\n        const { data } = await axios.get(`/api/users/${userId}`, {\r\n          headers: { Authorization: `Bearer ${userInfo.token}` },\r\n        });\r\n        dispatch({ type: \"FETCH_SUCCESS\" });\r\n        //set giá trị hiển thị thông tin lên ô input\r\n        setValue(\"name\", data.name);\r\n        setValue(\"email\", data.email);\r\n        setValue(\"isAdmin\", data.isAdmin);\r\n      } catch (err) {\r\n        toast.error(err.message, {\r\n          pauseOnHover: false,\r\n          delay: 0,\r\n        });\r\n        dispatch({ type: \"FETCH_FAIL\", payload: getError(err) });\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [setValue, userId, userInfo]);\r\n\r\n  //hàm cập nhật UserListUpdate\r\n  const handleUpdateUser = async (values) => {\r\n    try {\r\n      dispatch({ type: \"UPDATE_REQUEST\" });\r\n      //method PUT để update user\r\n      await axios.put(\r\n        `/api/users/${userId}`,\r\n        {\r\n          _id: userId,\r\n          name: values.name,\r\n          email: values.email,\r\n          isAdmin: values.isAdmin,\r\n        },\r\n        {\r\n          //xác thực đến backend\r\n          headers: { Authorization: `Bearer ${userInfo.token}` },\r\n        }\r\n      );\r\n      //setState\r\n      dispatch({ type: \"UPDATE_SUCCESS\" });\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"success\",\r\n        title: \"Update Thành Công\",\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n      navigate(\"/admin/user\");\r\n    } catch (err) {\r\n      toast.error(err.message, {\r\n        pauseOnHover: false,\r\n        delay: 0,\r\n      });\r\n      dispatch({ type: \"UPDATE_FAIL\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper className=\"section\">\r\n      <Heading>Cập Nhật Người Dùng</Heading>\r\n      {loading && <Loading />}\r\n      {error && <MessageBox variant=\"danger\">{error}</MessageBox>}\r\n      <form\r\n        className=\"form\"\r\n        autoComplete=\"off\"\r\n        onSubmit={handleSubmit(handleUpdateUser)}\r\n      >\r\n        <Field>\r\n          <Label htmlFor=\"Name\">Tên Người Dùng</Label>\r\n          <Input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Nhập Tên Người Dùng\"\r\n            required\r\n            control={control}\r\n          ></Input>\r\n        </Field>\r\n        <Field>\r\n          <Label htmlFor=\"Email\">Email</Label>\r\n          <Input\r\n            name=\"email\"\r\n            type=\"text\"\r\n            placeholder=\"Nhập Email Người Dùng\"\r\n            control={control}\r\n            required\r\n          ></Input>\r\n          {/* isAdmin */}\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            {/* sử dụng useController */}\r\n            <CheckboxHook\r\n              control={control}\r\n              name=\"isAdmin\"\r\n              checked={\"isAdmin\"}\r\n            ></CheckboxHook>\r\n            <Label htmlFor=\"isAdmin\">isAdmin</Label>\r\n          </div>\r\n        </Field>\r\n        <Button type=\"submit\" kind=\"ghost\" isLoading={isSubmitting}>\r\n          Xác Nhận\r\n        </Button>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default UserListUpdate;\r\n"],"names":["className","MessageBox","props","variant","children","FieldStyles","styled","InputStyles","hasIcon","theme","grayLight","name","type","control","value","field","useController","defaultValue","id","LabelStyles","htmlFor","HeadingStyles","text","checked","reducer","state","action","loading","error","payload","loadingUpdate","initialState","Wrapper","navigate","useNavigate","useForm","handleSubmit","setValue","isSubmitting","formState","userInfo","useStore","userId","useParams","useReducer","dispatch","useEffect","fetchData","axios","headers","Authorization","token","data","email","isAdmin","toast","message","pauseOnHover","delay","getError","handleUpdateUser","values","_id","Swal","position","icon","title","showConfirmButton","timer","Heading","Loading","autoComplete","onSubmit","Field","Label","Input","placeholder","required","Button","kind","isLoading"],"sourceRoot":""}